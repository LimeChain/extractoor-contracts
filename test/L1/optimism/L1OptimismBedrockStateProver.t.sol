// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "./../../../src/L1/optimism/L1OptimismBedrockStateProver.sol";
import "./../../../src/L1/optimism/IOptimismBedrockOutputOracle.sol";
import "./../../../src/library/optimism/Types.sol";
import "./../../mocks/MockOptimismBedrockOutputOracle.sol";
import {RLPReader} from "Solidity-RLP/RLPReader.sol";

contract L1OptimismBedrockStateProverTest is Test {
    using RLPReader for bytes;
    using RLPReader for RLPReader.RLPItem;

    L1OptimismBedrockStateProver public prover;
    MockOptimismBedrockOutputOracle public outputOracle;

    function setUp() public {
        outputOracle = new MockOptimismBedrockOutputOracle();
        prover = new L1OptimismBedrockStateProver(address(outputOracle));
    }

    function testProve() public {
        bytes32 outputRoot = 0x13a8da9b32ddb724fd5a164e7203fddf293f5e608f748a9f866a50a11e1b0eb8;
        uint128 timestamp = 1676645328;
        uint128 l2BlockNumber = 5608588;

        Types.OutputProposal memory state = Types.OutputProposal({
            outputRoot: outputRoot,
            timestamp: timestamp,
            l2BlockNumber: l2BlockNumber
        });

        outputOracle.setState(state);

        uint256 l2OutputIndex = 0x000000000000000000000000000000000000000000000000000000000000338c;
        Types.OutputRootProof memory proof = Types.OutputRootProof({
            stateRoot: 0x8b31d390ac00765481bf0d4f548f3eba0c2e4389250e14a081fe280169223416,
            withdrawalStorageRoot: 0xc0e7b6417a06c823080f11f01f82418fcf67f0fda464dacc99f11eb23324fb5a,
            latestBlockhash: 0x1a2e1e180c4e451d781a744198c96a91afacd7a177bfed02c927c7f0c5a49a09
        });

        address target = 0x29Fc256D083273230f426370d009Db7E26bE6d7A;
        bytes32 slot = 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;
        uint256 value = 0x2faeaaba6efe915aa877ee9ae1f0faf50e717883f2d3a5789036a4bddba696b4;

        bytes
            memory proofsBlob = hex"f909e9f9092cf90211a03729f88bd132c63c22f5913fe5750a58e68d934a8b39f20b1536aa46f389ec30a013e8ff06e51c305c9ac76200f9174e11d7746245a7aef30afabd95c23f72f484a034197a5c470c34d75594ebf6cdf009f016fb41f4587798bb255699a301d6bea8a0b253f727857ab6830b65926d2974e3c4bfc49a802a5dfee36536b9043be2224ba0aaa5c1f8c19e8e11af7100e959b2ce165101c02531283b67afe4f000e82bd0c7a0374829318fe278800cf78fa2b29417b20cb21dfbc7209f91fd3db923b181f812a03f456e3a01711ea45acdfb5b3ac00740d658f456e48b3d31c865518b0d327ab1a0fd1894908778929989c94449e8cfd6a2c201f67ea7b8675d358c3a4bb42dd014a051f14de6ab2156d439ce3486e23b0612cd27ecb76f549070d4df315262ed4c83a05c03c394062e4c50986b48dce67540e00234469a925f7d0013e846bb1715fc65a078862b769fd49c5b8ac9295fec40fca3bdf8826d5b4bffcb8f456368c65b4a18a0835225993ef6a0a6a92def7d73390bd27e59a5a87e411425dea3a70a20905d3ca07ec2b65832e6ed4ebe17576a9689c911b4d88d3fa63548c248c898c73c9e12bda0a3cfcd4b5eec97b2d94813e1f46202edba0c36c8157a91056dce656850225f18a0148965e8e9762d58ff551bf3bfbf693248a6aa4b3a82e8ff498ec87a6ad32eb0a007b7697c23956e7dfce5edf341ac03e7067a06a1db0592eb8c4f6327d4bc043780f90211a0b23b2412e45395779ac82815750c0abe885892e6e255a1cb7164469c54b0038ba0a222787522d6bea547d01603a59cbd6d9b266286d1ad110abfc20c826887281ea0dfd965d6860f8cfef230696dac71069e4f70d96fbdf2ffff6417c2fd507b5cd4a01b13ec0df24914967606e49b28702d7fbfa17b078f6c91e16e10791a6f2219e6a06b9916556000ba9d2a68259b39453985272e2f814cb7591cf620dbb24fee73daa0333c6946b9a1cd5147593d2ee2eb77111468de0ecba101566833099f9964c11ba0a40a2c3d371ea8e91d05a72249fc6bf50ad4dfd90cad1a7ae1b3ec6abe1116a3a00631f851a116bae4120ea99378a812a1b6e50c1b233faa220d0300f073ef94f3a003dc47f1c090e690b522af12aee55b8f3bf5b8b44ed7efec95ab63b3b9f537a3a06f6f771ff5c91e7c74fe1447d7d4f10304cb10bd5cd43c6efd09498be3e95877a0d5fd50f648b5cdb9108c154a5918c4c6256a7f65dd306466d911b85781102617a01d43cafacfe4d50437660c02dfb348f719ee31140f3fcafdbd9289d2fc7b8961a022b9097df56761a2880a347d67b3b1b155132586a9a89f3776d674e633f3b3b4a07acaf49ee090563c49b48d076651ae67ecdae41e56d8eeb5b7c06b06ae982e9aa0bfe9fd5583498d0783cd98de13286c0056cfae980e8953c700d83e20d7898937a03d0bbaca44ea354612b47fe5970ba460a5bb80bebdd92871be73cd5c5d87511480f90211a02cb79047701ebf3487d54aa4c5d1e8e60878dbf2364be68d4d2a9ac1cbdd2447a030737f0665c6512c18dc03daab0483dbd0c4ff23262188736e38e58ccfecccaaa09b323efe5b661028824675cc4ef0e25b0b75607a5548efb9aa6845ea7bb0ba49a01346cfac2d4fe0454d323bba3d179d22a318cc4f3d7494ed56d10cd2efd1adaca00d46a333c5aab6b641db51274ade2bdbf00c5384c127594882ee0db3a765a1dba05baa41379c6bff23f39aa2dbcf82532f92aaf413eb5268f787ca26e94808cdf6a03c94efa18e08d97183e8cda6a97f8e45d8238243da15b9325a7468e0ead33e4fa0c66e1c8788717474adb53770b4ea45c3d841e1b871c97903bea0b99187baae73a02a933f0f8b55c849be3fec3b4c785d142f89585666b240cfaf97e7318928431aa0cb50dce97ecc226acc63aff031586b71e473330e6e0aeb6af65947526a474602a0d93eb5c052a6a257d1e6538d65f8d4a3a0e0bdab4e482edec88f9924f1cabb83a0ddb4ccb9206d36bee8963c15c765ce4b52125400f4c7cb94c5d63d0c764b110ba034071a608e3ee77f525edd2bff930a6d44bd12067ba77d2219de37c3829e8a09a0d36c785d1e3d314746a70ee1d3ebf9ec96dcebe8b19fc3a68b041523d47e8285a0cce0d467fad68bd779d31ad894837fdb5b198bdd30c9c8f90eed6a68354f3317a0e9904c8b0fa11ae88dbdfe9d0a26b7e5f8294d37e0adfd92637bad4fca20e91980f90211a02ebd9ac1c8525918e71253f29df8747c6328e0073151bd41b223fd98f0fa3b19a06d3533be52e4ceac28bb19a3d6f0d59eb8fac90db83f6445ab726484013cb44ea0dafa72df018dc5a069b9b81193a571cb56ce4e3f55f1519d42c5548e48b949cca0c5f8fd80d05eae135ce487e7316dcf64eb72845c070137a64c0422800b389c9fa0e86e36d1a9180cfc449e1b4f0896bf603c8b9d68af4d5656cb7da6a5e81b6569a0544e507bdcc17dd5902e1ad16e4159e121ae6e67b512daa9fd21ee69b8ccc16ca04edb026223d03f055598af728cf4c718186e042414558da051d1879edd6b82aea0d33c7c5a5ed9fdfca1ff6787b0c140ecd2b759a41d64a142a6bf970248454c2fa037049bb5e5b211c10e4c7a18986f8593a45b6ec04bf02b374b648ce9e5ee6b73a07fad55fdf9edadd664247cb95ef67448cbec275d979c1768608b03f05c12d30da02425ee304420fd1de73a7b18119605ab01a7b094e057dd8da1e9858c3a84e9a5a0b23dada28d7d89f5343f8d14b61971e98d70bcf11368388d01b234d3e79530efa06b899b92fd56fd92edf2ed3227234f289882c9bcf8d0863e0b58811bd7205d3da037dbf987e960fd16eb9df7b3bd832d9b5df8aa1ac08396b3df911993bc9e9955a09af74628497973dafad9f64127d754285cd64cc79c5970bf0d8c8ebe416b1535a0fce3e719ced1345bf69968b7eef403d575209b9c0053ab9a8cfc25ff0c43dc7680f8718080808080808080a091a7fbe52f70722691256672c55aa400a5ffb15f9cb200ba1ada4348b228db988080a0eea07e0d8f6119b8b375b592de337db38d960e38011bc75e49ae71435c31d474a0e63a3ee28c1a57ea1d6284be0164ad24d7ffbf2b319bb538fd2c5f048fc419a680808080f8679e3cd957e373137bc677a305471c4e79a1aced09e811ce84b632bc3e336d82b846f8440180a0fbfeb5b8a6f14604621e558ef78b09c33082f9223500a75909ed6b368daed244a05c26486e2e0c4fedbb479e8981fe8514566755ecc5edc8a5e6f86862892a2d11f8b8f8718080a04fc5f13ab2f9ba0c2da88b0151ab0e7cf4d85d08cca45ccd923c6ab76323eb288080a0d7b78662400ac780b3fd987775c71ef0e76bc35032e702a7c71a3140eac3556980808080808080a0238cb47d9c85c37f284612c260eaaba387ec0ce5ca0ac2886fbf67a3e4733097808080f843a0310e4e770828ddbf7f7b00ab00a9f6adaf81c0dc9cc85f1f8249c256942d61d9a1a02faeaaba6efe915aa877ee9ae1f0faf50e717883f2d3a5789036a4bddba696b4";

        Types.MPTInclusionProof memory inclusionProof = Types
            .MPTInclusionProof({
                target: target,
                slotPosition: slot,
                proofsBlob: proofsBlob
            });

        bool inState = prover.proveInOptimismState(
            l2OutputIndex,
            proof,
            inclusionProof,
            value
        );
        assertEq(inState, true);
    }
}
